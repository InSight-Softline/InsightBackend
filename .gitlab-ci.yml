stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - release
  - deploy

#TESTING STAGE
#Testing Framework scheint cyprus zu werden https://docs.cypress.io/guides/guides/command-line
e2e-test-job:
  image: gradle:8.0.0-jdk21-alpine 
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - echo "Code coverage is 90%"

integration-test-job:
  image: gradle:8.0.0-jdk21-alpine
  stage: test
  script:
    - echo "[*] Starting Integration Test...."
    - echo "[*] Integration Test coverage is 100 %"

lint-test-job:   # This job also runs in the test stage.
  image: gradle:8.0.0-jdk21-alpine
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."


#BUILD STAGE
backend-build-job:       # This job runs in the build stage, which runs first.
  image: gradle:8.0.0-jdk21-alpine
  stage: build
  environment: production
  #rules:
  #  - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building the application..."
    - ./gradlew build && java -jar build/libs/gs-spring-boot-docker-0.1.0.jar
    - echo "Building complete! :)"
  artifacts:
    paths:
      - dist/ #artifact should be the path where the jar file is build

docker-deploy-job:
  image: docker:20
  stage: release
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - backend-build-job   
  #rules:
  # - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building & Deploying Docker Image..."
    - docker logout
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin #Authenticate against the gitlab container registry
    - docker build --build-arg JAR_FILE=build/libs/\*.jar -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend .    
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend
    - echo "[*] Image Build & Deployment was executed.."

# Deployment with SSH RCE
publish-job:      # This job runs in the deploy stage.
  image: ubuntu:24
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  variables:
    DOCKER_IMAGE: gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend:latest
    REMOTE_HOST: http://141.57.8.208
    REMOTE_DOMAIN: https://sp08.imn.htwk-leipzig.de
    REMOTE_USERNAME: stud-fim
  environment: 
    name: production
  # rules:
  #   - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - ssh $REMOTE_USERNAME@$REMOTE_HOST << 'EOF'
        echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin #Authenticate against the gitlab container registry
        podman pull $DOCKER_IMAGE
        podman stop insight-backend || true
        podman rm insight-backend || true
        podman run -d --name insight-backend -p 8080:8080 $DOCKER_IMAGE
      EOF
  # lokal (bei mir) einen ssh key erzeugen, den privatekey als variable festlegen und den public key 