stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy


.setupJava:
  image: java
  before_script:
    - #cd $(pwd)/frontend && npm install
    - #npm ci

#TESTING STAGE
#Testing Framework scheint cyprus zu werden https://docs.cypress.io/guides/guides/command-line
e2e-test-job:   # This job runs in the test stage.
  image: java #konkrete version
  stage: test    # It only starts when the job in the build stage completes successfully.
  extends: 
    - .setupJava
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    #- npm start &     # start the server in the background
    #- npm run e2e     # run Cypress tests
    - echo "Code coverage is 90%"

integration-test-job:
  image: java #konkrete version
  stage: test
  script:
    - echo "[*] Starting Integration Test...."
    - echo "[*] Integration Test coverage is 100 %"

lint-test-job:   # This job also runs in the test stage.
  image: java #konkrete version
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."


#BUILD STAGE
backend-build-job:       # This job runs in the build stage, which runs first.
  image: gradle #konkrete version
  stage: build
  environment: production
  extends: 
    - .setupNpm
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Building the application..."
    - ./gradlew build && java -jar build/libs/gs-spring-boot-docker-0.1.0.jar
    - echo "Building complete! :)"

docker-deploy-job:
  image: docker:20
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""  
  #rules:
  # - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "${CI_DEPLOY_PASSWORD}"
    - echo "Building & Deploying Docker Image..."
    - docker logout
    - echo -n "${CI_DEPLOY_PASSWORD}" | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin #Authenticate against the gitlab container registry
    - docker build --build-arg JAR_FILE=build/libs/\*.jar -t gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend .    
    - docker push gitlab.dit.htwk-leipzig.de:5050/projekt2024-s-audit-tool/backend
    - echo "[*] Image Build & Deployment was executed.."

publish-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: 
    name: production
    url: http://141.57.8.208
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed :)"
    # wir erstellen auf dem server einen docker runner, der aus der gitlab ci durch den projektnamen tag getriggert