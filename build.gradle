plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.6'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.insight'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.1'
    implementation 'org.springframework:spring-context-support:6.0.12'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.6'
    implementation 'com.github.java-json-tools:json-patch:1.13'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0' // Aktualisierte Version
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'

    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc:12.2.0.jre11'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.insight.backend.BackendApplication'
        )
    }
}

bootJar {
    archiveFileName = 'insight-spring.jar'
}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    doLast {
        if (file("${buildDir}/docs/javadoc/index.html").exists()) {
            println "JavaDoc generation successful."
        } else {
            println "Warning: JavaDoc generation failed or was skipped."
        }
    }
}

task buildDocker(type: Exec) {
    dependsOn build
    commandLine 'docker', 'build', '-t', 'insight-spring', '.'
}

task runDocker(type: Exec) {
    dependsOn buildDocker
    commandLine 'docker', 'run', '-p', '81:81', 'insight-spring'
}

test {
    testLogging {
        showStandardStreams = true
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat "full"

        afterSuite { descriptor, result ->
            if (!descriptor.parent) {
                println "Results: ${result.resultType}"
                println "Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}"
            }
        }
    }
}

sonar {
  properties {
    property "sonar.projectKey", "Insight__Backend"
    property "sonar.projectName", "Insight__Backend"
    property "sonar.qualitygate.wait", true
  }
}