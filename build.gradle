plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.6'
    id 'io.spring.dependency-management' version '1.1.5'
    id "org.sonarqube" version "5.0.0.4638"
    id "jacoco"
}

group = 'com.insight'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'com.github.java-json-tools:json-patch:1.13'
    implementation 'com.opencsv:opencsv:5.9'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3' // Aktualisierte Version
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.insight.backend.BackendApplication'
        )
    }
}

bootJar {
    archiveFileName = 'insight-spring.jar'
}

test {
    testLogging {
        showStandardStreams = true
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat "full"

        afterSuite { descriptor, result ->
            if (!descriptor.parent) {
                println "Results: ${result.resultType}"
                println "Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}"
            }
        }
    }

    finalizedBy jacocoTestReport
}

sonar {
  properties {
    property "sonar.projectKey", "Insight__Backend"
    property "sonar.projectName", "Insight__Backend"
    property "sonar.qualitygate.wait", true
    property "sonar.java.binaries", "build/classes/java/main"
    property "sonar.coverage.jacoco.xmlReportPath", "/build/reports/jacocoTestReport.xml"
    property "sonar.log.level.es", "DEBUG"
    property "sonar.plugins.downloadOnlyRequired", true

  }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.destination = "./tests.xml"
        xml.required = true
        csv.required = false
        html.required = false
    }
}